% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/table_duplicate.R
\name{table_duplicate}
\alias{table_duplicate}
\title{Copy a (smaller) SQL table from one server to another}
\usage{
table_duplicate(
  conn_from,
  conn_to,
  server_to,
  db_to,
  table_df = data.frame(),
  from_schema = NULL,
  from_table = NULL,
  to_schema = NULL,
  to_table = NULL,
  to_table_prefix = NULL,
  confirm_tables = TRUE,
  delete_table = FALSE,
  delete_table_suffix = "_dupe_table_to_delete",
  table_structure_only = FALSE
)
}
\arguments{
\item{conn_from}{Name of the connection to the FROM SQL database}

\item{conn_to}{Name of the connection to the TO SQL database}

\item{server_to}{Name of the server/odbc for the TO SQL database.

\strong{IMPORTANT} For any Azure based duplication, this must be an ODBC DSN name
that you create first (see \code{\link[=load_df_bcp]{load_df_bcp()}} for setup instructions), and there
must be a keyring entry with a service name that matches this parameter.
Use \code{\link[=apde_keyring_set]{apde_keyring_set()}} or \code{keyring::key_set("your_dsn_name")} to store credentials.}

\item{db_to}{Name of the TO SQL database}

\item{table_df}{Optional data.frame listing tables to duplicate. Must contain
at least \code{from_schema} and \code{from_table} columns. Optional columns:
\code{to_schema}, \code{to_table}. If values are missing in this data frame,
they will be filled using the respective \code{from_schema}, \code{from_table},
\code{to_schema}, and \code{to_table} arguments.}

\item{from_schema}{Schema name of the source table. Required if \code{table_df}
is empty or missing the \code{from_schema} column. Used as a fallback if any
row in \code{table_df$from_schema} is missing or \code{NA}.}

\item{from_table}{Name of the source table. Required if \code{table_df} is empty
or missing the \code{from_table} column. Used as a fallback if any row in
\code{table_df$from_table} is missing or \code{NA}.}

\item{to_schema}{Schema name of the destination table. Optional. If not
provided, defaults to \code{from_schema}. Used as a fallback if any row in
\code{table_df$to_schema} is missing or \code{NA}.}

\item{to_table}{Name of the destination table. Optional. If not provided,
defaults to \code{from_table}. Used as a fallback if any row in
\code{table_df$to_table} is missing or \code{NA}.}

\item{to_table_prefix}{Optional character prefix to be added before every
\code{to_table} name in the destination database.}

\item{confirm_tables}{If \code{TRUE}, will require user confirm the list of
tables being duplicated}

\item{delete_table}{If \code{TRUE}, will delete old TO tables, if \code{FALSE},
will rename old TO tables}

\item{delete_table_suffix}{Variable of a suffix to be added after the name of
old TO tables}

\item{table_structure_only}{If \code{TRUE}, will only copy the table structure
without data}
}
\value{
None
}
\description{
Copies one or more small SQL tables from a source to a destination database,
with options to customize names, preserve or replace existing tables, and
copy structure only.
}
\details{
You can provide table duplication information in two ways:
\enumerate{
\item \strong{Batch Mode}: Pass a \code{table_df} with one or more rows.
Columns \code{from_schema} and \code{from_table} are required; \code{to_schema}
and \code{to_table} are optional. Any missing values will be filled in using
the corresponding standalone arguments.
\item \strong{Single Table Mode}: Leave \code{table_df} empty and supply
\code{from_schema}, \code{from_table}, and optionally \code{to_schema} and
\code{to_table}.
}

\strong{IMPORTANT DEPENDENCY:} This function uses BCP (Bulk Copy Program) for data
transfer. See \code{\link[=load_df_bcp]{load_df_bcp()}} for installation instructions and Azure
setup requirements.

The function automatically creates the destination table structure by querying
the source table's schema information. If the destination table already exists,
it will be compared with the source data and either renamed (default) or
deleted based on the \code{delete_table} parameter.

This function is designed for smaller reference or lookup tables. For larger
datasets, a more robust process is recommended.
}
\note{
This function replaces the deprecated \code{table_duplicate_f()} function from the
\code{apde} package.
}
\examples{
 \dontrun{
  # Note: Requires BCP utility installation and proper database connections

  # Setup connections
  conn_from <- create_db_connection("source_server", prod = FALSE)
  conn_to <- create_db_connection("dest_server", prod = FALSE)

  # Example 1: Simple single table duplication
  table_duplicate(conn_from = conn_from,
                  conn_to = conn_to,
                  server_to = "dest_server_dsn",
                  db_to = "target_database",
                  from_schema = "source_schema",
                  from_table = "lookup_table",
                  to_schema = "dest_schema",
                  to_table = "lookup_table_copy",
                  confirm_tables = FALSE)

  # Example 2: Structure only (no data)
  table_duplicate(conn_from = conn_from,
                  conn_to = conn_to,
                  server_to = "dest_server_dsn",
                  db_to = "target_database",
                  from_schema = "source_schema",
                  from_table = "reference_table",
                  table_structure_only = TRUE,
                  confirm_tables = FALSE)

  # Example 3: Batch mode with multiple tables
  tables_to_copy <- data.frame(
    from_schema = c("schema1", "schema1", "schema2"),
    from_table = c("table1", "table2", "table3"),
    to_schema = c("dest_schema", "dest_schema", "dest_schema"),
    to_table = c("new_table1", "new_table2", "new_table3")
  )

  table_duplicate(conn_from = conn_from,
                  conn_to = conn_to,
                  server_to = "dest_server_dsn",
                  db_to = "target_database",
                  table_df = tables_to_copy,
                  confirm_tables = TRUE)

  # Example 4: With table prefix for organizational purposes
  table_duplicate(conn_from = conn_from,
                  conn_to = conn_to,
                  server_to = "dest_server_dsn",
                  db_to = "target_database",
                  from_schema = "source_schema",
                  from_table = "data_table",
                  to_table_prefix = "backup_",
                  confirm_tables = FALSE)

  # Don't forget to disconnect
  DBI::dbDisconnect(conn_from)
  DBI::dbDisconnect(conn_to)
 }

}
\seealso{
\itemize{
\item \code{\link[=load_df_bcp]{load_df_bcp()}} for BCP installation and Azure setup requirements
\item \code{\link[=table_duplicate_delete]{table_duplicate_delete()}} for cleaning up tables with specified suffixes
\item \code{\link[=apde_keyring_set]{apde_keyring_set()}} for setting up keyring credentials for Azure connections
}
}
\author{
Jeremy Whitehurst, 2024-05-01
}
