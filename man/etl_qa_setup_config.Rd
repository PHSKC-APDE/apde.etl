% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/etl_qa_run_pipeline.R
\name{etl_qa_setup_config}
\alias{etl_qa_setup_config}
\title{Set up configuration for ETL QA pipeline}
\usage{
etl_qa_setup_config(
  data_source_type,
  connection = NULL,
  data_params = list(),
  output_directory = NULL,
  digits_mean = 0,
  digits_prop = 3,
  abs_threshold = 3,
  rel_threshold = 2,
  distinct_threshold = 1
)
}
\arguments{
\item{data_source_type}{Character string specifying the type of data source}

\item{connection}{A DBIConnection object for SQL Server connections}

\item{data_params}{List of parameters specific to the data source}

\item{output_directory}{Character string specifying the output directory}

\item{digits_mean}{Integer specifying decimal places for mean rounding}

\item{digits_prop}{Integer specifying decimal places for proportion rounding}

\item{abs_threshold}{Numeric threshold for flagging absolute changes}

\item{rel_threshold}{Numeric threshold for flagging relative changes}

\item{distinct_threshold}{Minimum number of distinct values needed for
calculating the minimum, median, and maximum values.}
}
\value{
An S3 object of class "qa_data_config", which is a list containing the configuration settings.
}
\description{
This function creates a configuration object for the ETL QA pipeline based on
the provided parameters. It is the first step called upon by
\code{\link[=etl_qa_run_pipeline]{etl_qa_run_pipeline()}}.
}
\details{
This is an \emph{internal function} accessible only by use of \code{:::}, for example,
\code{apde.etl:::etl_qa_setup_config(...)}. The arguments are identical to those used
by \code{\link[=etl_qa_run_pipeline]{etl_qa_run_pipeline()}}. Please review that helpful for details.
}
\examples{
\dontrun{
# The following examples generate config objects which can be passed to
# etl_qa_initial_results()

# Example with RADS
config.rads <- etl_qa_setup_config(
  data_source_type = 'rads',
  data_params = list(
    function_name = 'get_data_birth',
    time_var = 'chi_year',
    time_range = c(2021, 2022),
    cols = c('chi_age', 'race4', 'birth_weight_grams', 'birthplace_city',
             'num_prev_cesarean', 'mother_date_of_birth'),
    version = 'final',
    kingco = FALSE,
    check_chi = FALSE
  ),
  output_directory = 'C:/temp/'
)
class(config.rads)


# Example with R data.frame
birth_data <- rads::get_data_birth(year = c(2021:2022),
                             kingco = F,
                             cols = c('chi_age', 'race4', 'birth_weight_grams',
                             'birthplace_city', 'num_prev_cesarean',
                             'chi_year', 'mother_date_of_birth'),
)
config.df <- etl_qa_setup_config(
  data_source_type = 'r_dataframe',
  data_params = list(
    data = birth_data,
    time_var = 'chi_year',
    time_range = c(2021, 2022),
    cols = c('chi_age', 'race4', 'birth_weight_grams', 'birthplace_city',
             'num_prev_cesarean', 'mother_date_of_birth'),
    check_chi = FALSE
  ),
  output_directory = 'C:/temp/'
)
class(config.df)


# Example with SQL Server
library(DBI)
myconnection <- rads::validate_hhsaw_key()
config.sql <- etl_qa_setup_config(
  data_source_type = 'sql_server',
  connection = myconnection,
  data_params = list(
    schema_table = 'birth.final_analytic',
    time_var = 'chi_year',
    time_range = c(2021, 2022),
    cols =c('chi_age', 'race4', 'birth_weight_grams', 'birthplace_city',
            'num_prev_cesarean', 'mother_date_of_birth'),
    check_chi = FALSE
  ),
  output_directory = 'C:/temp/'
)
class(config.sql)

}


}
\keyword{internal}
