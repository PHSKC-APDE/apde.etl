% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/load_table_from_sql.R
\name{load_table_from_sql}
\alias{load_table_from_sql}
\title{Load data from one SQL table to another}
\usage{
load_table_from_sql(
  conn,
  server = NULL,
  config = NULL,
  config_url = NULL,
  config_file = NULL,
  from_schema = NULL,
  from_table = NULL,
  to_schema = NULL,
  to_table = NULL,
  archive_schema = NULL,
  archive_table = NULL,
  truncate = FALSE,
  truncate_date = FALSE,
  auto_date = FALSE,
  date_var = "from_date",
  date_cutpoint = NULL,
  drop_index = TRUE,
  test_schema = NULL
)
}
\arguments{
\item{conn}{SQL server connection created using \code{odbc} or \code{DBI} packages.}

\item{server}{Name of server being used (only applies if using a YAML file).
Useful if the same table is loaded to multiple servers but with different names
or schema.}

\item{config}{Name of object in global environment that contains configuration
information. Use one of \code{config}, \code{config_url}, or \code{config_file}.
Should be in a YAML format with at least the following variables:
\emph{from_schema}, \emph{from_table}, \emph{to_schema} and \emph{to_table}.
All mandatory variables should all be nested under the server name if applicable,
other variables should not.}

\item{config_url}{URL of a YAML config file. Use one of \code{config}, \code{config_url}, or
\code{config_file}. Note the requirements under \code{config}.}

\item{config_file}{File path of a YAML config file. Use one of \code{config}, \code{config_url}, or
\code{config_file}. Note the requirements under \code{config}.}

\item{from_schema}{Name of the schema that data will be loaded from (if not using YAML input).}

\item{from_table}{Name of the table that data will be loaded from (if not using YAML input).}

\item{to_schema}{Name of the schema that data will be loaded to (if not using YAML input).}

\item{to_table}{Name of the table that data will be loaded to (if not using YAML input).}

\item{archive_schema}{Name of the schema where archived data live (if not using YAML input).
Must be provided if using truncate_date (either directly or from the YAML).}

\item{archive_table}{Name of the table where archived data live (if not using YAML input).
Must be provided if using truncate_date (either directly or from the YAML).}

\item{truncate}{Truncate existing table prior to loading. Default is \code{FALSE}.}

\item{truncate_date}{Truncate existing table at a certain date. Assumes existing table has older data.
Must provide archive_schema and archive_table values (either directly or from the YAML) if using this
option because existing data needs to go somewhere. Default is \code{FALSE}.}

\item{auto_date}{Attempt to use from_table data to ascertain the date to use for truncation cutoff. Default is \code{FALSE}.}

\item{date_var}{Name of the date variable}

\item{date_cutpoint}{Date at which to truncate existing data (if not using YAML input or auto_date).}

\item{drop_index}{Drop any existing indices prior to loading data. This can speed
loading times substantially. Use \code{add_index} to restore the index after. Default is \code{TRUE}.}

\item{test_schema}{Write to a temporary/development schema when testing out table creation.
Will use the to_schema (specified or in the YAML file) to make a new table name of
\{to_schema\}_\{to_table\}. Schema must already exist in the database. Most useful
when the user has an existing YAML file and does not want to overwrite it.
Only 5,000 rows will be loaded to each table (4000 from the archive table if it exists and 1000 from the
from_table). Default is NULL.}
}
\description{
\code{load_table_from_sql} loads data from one SQL table to another
using specified variables or a YAML config file.
}
\details{
This function loads data file to an already existing SQL table using
specified variables or a YAML configuration file. The function is essentially a
shortcut for SQL code to truncate a table and insert new rows, with added functionality
for truncating at a certain date and loading from an archive table.
Users can specify some input functions (e.g., to_table) and rely on the config file
for the rest of the necessary information.
For all arguments that could be specified or come from a YAML file, the hierarchy is
specified > argument under server in YAML > argument not under server in YAML.
}
\note{
This function replaces the deprecated \code{load_table_from_sql()} function from the
\code{apde} package.
\subsection{Example YAML file with no server or individual years}{

(Assume the indentation is appropriate)

\if{html}{\out{<div class="sourceCode">}}\preformatted{from_schema: stage
from_table: mcaid_elig
to_schema: final
to_table: mcaid_elig
*optional other components like a qa_schema and qa_table, index name, vars, etc.*
}\if{html}{\out{</div>}}
}

\subsection{Example YAML file with servers (phclaims, hhsaw) and individual years}{

(Assume the indentation is appropriate)

\if{html}{\out{<div class="sourceCode">}}\preformatted{phclaims:
    from_schema: stage
    from_table: mcaid_elig
    to_schema: final
    to_table: mcaid_elig
hhsaw:
    from_schema: claims
    from_table: stage_mcaid_elig
    to_schema: claims
    to_table: final_mcaid_elig
*optional other components like a qa_schema and qa_table, index name, vars, etc.*
}\if{html}{\out{</div>}}
}
}
\examples{
\dontrun{
load_table(conn = db_claims, server = "hhsaw", config = load_config)

load_table(conn = db_claims, server = "phclaims",
  config_url = "https://raw.githubusercontent.com/PHSKC-APDE/claims_data/load_mcaid_raw.yaml",
  overall = F, ind_yr = T)
}

}
