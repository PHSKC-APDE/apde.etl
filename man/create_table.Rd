% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/create_table.R
\name{create_table}
\alias{create_table}
\title{Create a SQL table}
\usage{
create_table(
  conn,
  server = NULL,
  config = NULL,
  config_url = NULL,
  config_file = NULL,
  to_schema = NULL,
  to_table = NULL,
  vars = NULL,
  overwrite = T,
  external = F,
  ext_data_source = NULL,
  ext_schema = NULL,
  ext_object_name = NULL,
  overall = T,
  ind_yr = F,
  years = NULL,
  years_vars = NULL,
  test_schema = NULL
)
}
\arguments{
\item{conn}{SQL server connection created using \code{odbc} package.}

\item{server}{Name of server being used (only applies if using a YAML file).
Useful if the same table is loaded to multiple servers but with different names
or schema.}

\item{config}{Name of object in global environment that contains configuration
information. Use one of \code{config}, \code{config_url}, or \code{config_file}.
Should be in a YAML format with at least the following variables:
\strong{to_schema}, \strong{to_table}, \strong{vars}. \strong{to_schema} and \strong{to_table} should be
nested under the server name if applicable. The \strong{vars} variable should not be listed
under the server name but should list all variables in the table along with
data type, e.g., id_apde VARCHAR(20). If a server is being specified,
the \strong{to_schema} and \strong{to_table} variables should be nested under that server name.}

\item{config_url}{URL of a YAML config file. Use one of \code{config}, \code{config_url}, or
\code{config_file}. Note the requirements under \code{config}.}

\item{config_file}{File path of a YAML config file. Use one of \code{config}, \code{config_url}, or
\code{config_file}. Note the requirements under \code{config}.}

\item{to_schema}{Name of the schema to apply the index to (if not using YAML input).}

\item{to_table}{Name of the table to apply the index to (if not using YAML input).}

\item{vars}{Named vector of variables to create in the table (if not using YAML input).
Should take the format \code{c("a" = "VARCHAR(255)", "b" = "DATE", "c" = "INTEGER")}.}

\item{overwrite}{Drop table first before creating it, if it exists. Default is TRUE.}

\item{external}{Create external table. This option requires specifying data source
details in the \strong{ext_data_source}, \strong{ext_schema}, and \strong{ext_object_name} variables
(either when calling the function or in the YAML file). If in the YAML file, these
variables should not be nested under a server name. Default is FALSE.}

\item{ext_data_source}{Name of the external data source (if not using YAML input).
This pointer should already be established in the SQL database.}

\item{ext_schema}{Name of the external data schema (if not using YAML input).}

\item{ext_object_name}{Name of the external data table (if not using YAML input).}

\item{overall}{Create single table instead of a table for each calendar year.
Mutually exclusive with \strong{ind_yr} option. Default is TRUE.}

\item{ind_yr}{Create multiple tables with the same core structure, one for each
calendar year, with a year suffix on each table name (e.g., mcaid_elig_2014).
Mutually exclusive with \strong{overall} option. If using this option, the list of years
should be provided via the \strong{years} argument or a \strong{years} variable in the YAML file.
If a given year has additional specific fields, these should be listed in the \strong{vars} variable,
nested under the calendar year (see example in description). Default is FALSE.}

\item{years}{Vector of individual years to make tables for (if not using YAML input).}

\item{years_vars}{List of named vectors of additional variables that are specific to
a given year (if not using YAML input). Should take the format
\code{list("2014" = c("DUAL_ELIG" = "VARCHAR(255)", "TPL_FULL_FLAG" = "VARCHAR(255)"), "2016" = c("SECONDARY_RAC_CODE" = "INTEGER", "SECONDARY_RAC_NAME" = "VARCHAR(255)"))}
where the list names match the years to load.}

\item{test_schema}{Use a temporary/development schema to test out table creation.
Will use the to_schema (specified or in the YAML file) to make a new table name of
\verb{\{to_schema\}_\{to_table\}}. Schema must already exist in the database. Most useful
when the user has an existing YAML file and does not want to overwrite it. Default is NULL.}
}
\value{
No return value, called for side effects (creates SQL tables).
}
\description{
\code{create_table()} creates a SQL table using specified variables or a YAML config file.
}
\details{
This function creates tables in a SQL database using specified variables or a YAML configuration file.
Users can specify some input functions (e.g., to_table) and rely on the config
file for the rest of the necessary information. For all arguments that could be
specified or come from a YAML file, the hierarchy is
specified > argument under server in YAML > argument not under server in YAML.
\subsection{Performance Notes}{

When creating multiple year tables (\code{ind_yr = TRUE}), tables are created sequentially.
Large numbers of years may take significant time depending on database performance.
}

\subsection{Example YAML file with no server or individual years}{

(Assume the indentation is appropriate)

\if{html}{\out{<div class="sourceCode yaml">}}\preformatted{to_schema: raw
to_table: mcaid_elig
# optional other components like a qa_schema and qa_table, file path to data, index name, etc.
vars:
    CLNDR_YEAR_MNTH: INTEGER
    MEDICAID_RECIPIENT_ID: VARCHAR(255)
    RPRTBL_RAC_CODE: INTEGER
    RPRTBL_RAC_NAME: VARCHAR(255)
    RPRTBL_BSP_GROUP_CID: INTEGER
    RPRTBL_BSP_GROUP_NAME: VARCHAR(255)
    FROM_DATE: DATE
    TO_DATE: DATE
}\if{html}{\out{</div>}}
}

\subsection{Example YAML file with servers (phclaims, hhsaw) and individual years}{

(Assume the indentation is appropriate)

\if{html}{\out{<div class="sourceCode yaml">}}\preformatted{phclaims:
    to_schema: raw
    to_table: mcaid_elig
hhsaw:
    to_schema: raw
    to_table: mciad_elig
# optional other components like a qa_schema and qa_table, file path to data, index name, etc.
vars:
    CLNDR_YEAR_MNTH: INTEGER
    MEDICAID_RECIPIENT_ID: VARCHAR(255)
    RPRTBL_RAC_CODE: INTEGER
    RPRTBL_RAC_NAME: VARCHAR(255)
    RPRTBL_BSP_GROUP_CID: INTEGER
    RPRTBL_BSP_GROUP_NAME: VARCHAR(255)
    FROM_DATE: DATE
    TO_DATE: DATE
years:
    - 2014
    - 2015
    - 2016
2014:
    vars:
        DUAL_ELIG: VARCHAR(255)
        TPL_FULL_FLAG: VARCHAR(255)
2016:
    vars:
        SECONDARY_RAC_CODE: INTEGER
        SECONDARY_RAC_NAME: VARCHAR(255)
}\if{html}{\out{</div>}}
}
}
\note{
This function replaces the deprecated \code{create_table} function from the
\code{apde} package.
}
\examples{
\dontrun{
create_table(conn = db_claims, server = "hhsaw", config = load_config)
create_table(conn = db_claims, server = "phclaims",
config_url = "https://raw.githubusercontent.com/PHSKC-APDE/claims_data/load_mcaid_raw.R",
overall = FALSE, ind_yr = TRUE)
}

}
\keyword{database}
